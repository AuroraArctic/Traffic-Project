rbind(data) %>%
# Plot the sunburst
plot_ly(labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total') %>%
layout(sunburstcolorway = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'))
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = as.factor(data$month, order = TRUE, levels = months)
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = as.factor(data$month, order = TRUE, levels = months)
data
data$month = as.factor(data$month, order = TRUE, levels = months)
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = as.factor(data$month, order = TRUE, levels = months)
data
str(data)
data$hour = assign_daytime(data$hour)
data
data %>%
plot_ly(colors = c('#FFADD3','#a9def9','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')
data$month = factor(data$month, order = TRUE, levels = months)
data
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data %>%
arrange()
data %>%
plot_ly(colors =  c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')
assign_daytime = function(hour){
ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night")))
}
renderPlotly({
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = factor(data$month, order = TRUE, levels = months)
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data %>%
plot_ly(colors =  c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')
})
data
data %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
plot_ly(
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles))
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = factor(data$month, order = TRUE, levels = months)
data
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data
data %>%
arrange(hour)
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,-hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,desc(hour)) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,desc(hour)) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = factor(data$month, order = TRUE, levels = months)
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data %>%
group_by(month,desc(hour)) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,desc(hour)) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data
data %>%
group_by(month,desc(hour)) %>%
summarise(vehicles = mean(vehicles))
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,desc(hour)) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour) %>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
data$month = factor(data$month, order = TRUE, levels = months)
data$hour = factor(assign_daytime(data$hour), order = TRUE,levels = c("Morning","Afternoon","Evening","Night"))
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~reorder(hour),
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~arrange(hour),
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~sort(hour),
type='bar')%>%
layout(barmode = 'group')
data %>%
group_by(month,hour) %>%
summarise(vehicles = mean(vehicles)) %>%
arrange(month,hour)%>%
plot_ly(colors = c('#FFADD3','#a9def9','#FBF4B1','#CDF3DC'),
x = ~month,
y = ~vehicles,
color = ~hour,
type='bar')%>%
layout(barmode = 'group')
awards <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
# also convert ID to factor (even if we will not use it for modeling)
awards$id <- factor(awards$id)
awards <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
head(awards)
summary(awards)
awards$prog <- factor(awards$prog, levels=1:3, labels=c("General", "Academic", "Vocational"))
# also convert ID to factor (even if we will not use it for modeling)
awards$id <- factor(awards$id)
summary(awards)
with(awards, tapply(num_awards, prog, mean))
# 1) the with(data, expr) function evaluates 'expr' on variables belonging to the dataframe 'data'
# 2) tapply(x, index, function) applies 'function' to 'x' stratifying by each level of the 'index' factor
with(awards, tapply(num_awards, prog, sd))
pois.fit <- glm(num_awards ~ prog + math, family=poisson, data=awards)
summary(pois.fit)
if(!require("e1071")) {
install.packages("e1071")
library(e1071)
}
data(Titanic)
df <- as.data.frame(Titanic)
# we create a sequence of as many row ids as their corresponding Freq value
repeating_sequence <- rep(seq(nrow(df)), df$Freq)
# we use this sequence to create the full dataset
df_full <- df[repeating_sequence, ]
# and drop the Freq column
df_full$Freq <- NULL
df_full
nbfit <- naiveBayes(Survived ~ ., data=df_full)
nbfit
library(mongolite)
install.packages('mongolite')
m <- mongo("Predictions", url = "mongodb+srv://root:BigData@cluster0.oc5hq.mongodb.net/test")
library(mongolite)
m <- mongo("Predictions", url = "mongodb+srv://root:BigData@cluster0.oc5hq.mongodb.net/test")
m
latest_predictions = m$find(sort = '{"timestamp": -1}')
latest_predictions
latest_predictions = m$find()
latest_predictions
m <- mongo("Predictions", url = "mongodb+srv://root:BigData@cluster0.oc5hq.mongodb.net/TrafficBolzano")
m <- mongo(collection = "Predictions",
db = 'TrafficBolzano',
url = "mongodb+srv://root:BigData@cluster0.oc5hq.mongodb.net/test")
m$find()
latest_predictions = m$find(sort = '{timestamp:-1}')
latest_predictions = m$find(sort = '{"timestamp":-1}')
latest_predictions
latest_predictions$timestamp[1]
latest_predictions = m$find(sort = '{"timestamp":-1}', limit=1)
latest_timestamp = latest_predictions$timestamp[1]
latest_timestamp
paste0('{"timestamp":',latest_timestamp,'}')
latest_data = m$find(paste0('{"timestamp":',latest_timestamp,'}'))
latest_data = m$find(paste0('{"timestamp":"',latest_timestamp,'"}'))
latest_data
# Connection to DB
source("mysql_connection.R")
mongo_con <- mongodbconnect()
mongo_db <- mongodbconnect()
# Connection to DB
source("mysql_connection.R")
mongo_db <- mongodbconnect()
latest_timestamp = m$find(sort = '{"timestamp":-1}', limit=1)$timestamp[1]
latest_data = m$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name"))
mongo_db <- mongodbconnect()
latest_timestamp = mongo_db$find(sort = '{"timestamp":-1}', limit=1)$timestamp[1]
latest_data = mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name"))
mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}'))
dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
))
# Connection to DB
source("mysql_connection.R")
# Establish connectiong to MySQL
con <- mysqldbconnect()
dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
))
latest_data = mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name"))
latest_data
config <- config::get(file = "config.yml")
library(mongolite)
m <- mongo(collection = "Predictions",
db = 'TrafficBolzano',
url = config$mongodb)
# Libraries for data manipulation and visualization
library("shinythemes")
library("flexdashboard")
library("DBI")
library("dplyr")
library("ggplot2")
library("tidyverse")
library("shinyWidgets")
library("shiny")
library("plotly")
library("scales")
library("DT")
library("leaflet")
library("leaflet.extras")
library("maps")
library("rio")
# Connection to DB
source("mysql_connection.R")
library("RMariaDB")
# Establish connection to MySQL
con <- mysqldbconnect()
mongo_db <- mongodbconnect()
# Inserting token of mapbox for styling
mapboxToken <- config::get(file = "config.yml")$mapbox
Sys.setenv("MAPBOX_TOKEN" = mapboxToken)
latest_timestamp = mongo_db$find(sort = '{"timestamp":-1}', limit=1)$timestamp[1]
format(latest_timestamp,'%Y-%m-%d %H:%M:%S')
latest_timestamp
latest_timestamp
latest_data = mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name"))
# Connection to DB
source("mysql_connection.R")
# Establish connection to MySQL
con <- mysqldbconnect()
mongo_db <- mongodbconnect()
latest_data = mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name"))
latest_data
typeof(latest_DATA)
typeof(latest_DATA)
typeof(latest_data)
data.frame(latest_data)
typeof(data.frame(latest_data))
typeof(as.data.frame(latest_data))
as.data.frame(latest_data)
function (x, row.names = NULL, optional = FALSE, ...)
latest_data = as.data.frame(mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name")))
latest_data
View(latest_data)
latest_data = as.data.frame(mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name")))
# Connection to DB
source("mysql_connection.R")
# Establish connection to MySQL
con <- mysqldbconnect()
mongo_db <- mongodbconnect()
latest_data = as.data.frame(mongo_db$find(paste0('{"timestamp":"',latest_timestamp,'"}')) %>%
inner_join(dbGetQuery(con, paste0(
"SELECT * FROM bluetoothstations.station
WHERE latitude IS NOT NULL and longitude IS NOT NULL;"
)),by = c("station"="name")))
latest_data
typeof(latest_data)
typeof(as.data.frame(latest_data))
dbGetQuery(con, paste0(
"SELECT *
FROM bluetoothstations.station;"))
df = dbGetQuery(con, paste0(
"SELECT *
FROM bluetoothstations.station;"))
typeof(df)
