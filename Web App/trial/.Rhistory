color_discrete_sequence = palette)
palette = pals::brewer.pastel2()
plot_ly(data = data, x = ~hour) %>%
add_lines(y = ~mean,color = ~weekday,
color_discrete_sequence = palette)
plot_ly(data = data, x = ~hour) %>%
add_lines(y = ~mean,color = ~weekday,
color_discrete_sequence = pals::brewer.pastel2(7))
plot_ly(data = data, x = ~hour) %>%
add_lines(y = ~mean,color = ~weekday,
color_discrete_sequence = c('red','pink','yellow','blue','green','orange','violet'))
plot_ly(data = data, x = ~hour) %>%
add_lines(y = ~mean,color = ~weekday,
color_discrete_sequence = 'Accent')
plot_ly(data = data, x = ~hour,colors = 'Accent') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = 'viridis') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = 'plasma') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = 'pastel2') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = 'pastel') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = 'Picnic') %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = pals::brewer.pastel2(7)) %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = pals::brewer.pastel1(7)) %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = c("#ffadad","#ffd6a5","#fdffb6","#caffbf","#9bf6ff","#a0c4ff","#ffc6ff")) %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = c(["#ffadad","#ffd6a5","#e6f68e","#caffbf","#9bf6ff","#a0c4ff","#ffc6ff"])) %>%
add_lines(y = ~mean,color = ~weekday)
plot_ly(data = data, x = ~hour,colors = c(["#ffadad","#ffd6a5","#e6f68e","#caffbf","#9bf6ff","#a0c4ff","#ffc6ff"]) %>%
add_lines(y = ~mean,color = ~weekday)
})
plot_ly(data = data, x = ~hour,colors = c("#ffadad","#ffd6a5","#e6f68e","#caffbf","#9bf6ff","#a0c4ff","#ffc6ff")) %>%
add_lines(y = ~mean,color = ~weekday)
palette = c("#ffadad","#ffd6a5","#e6f68e","#caffbf","#9bf6ff","#a0c4ff","#ffc6ff")
data = dbGetQuery(con,paste0("
SELECT weekday, hour, AVG(mean) as mean
FROM bluetoothstations.time_group
GROUP BY weekday, hour;"))
plot_ly(data = data, x = ~hour,colors = palette) %>%
add_lines(y = ~mean,color = ~weekday)
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY month, hour;"))
plot_ly(data = data,
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
plot_ly(data = data,
type = 'lines',
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
plot_ly(data = data) %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY month, hour;"))
data
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month;"))
data
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
plot_ly(data = data) %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
data %>%
mutate(month = as.factor(month))
data %>%
mutate(month = as.factor(month)) %>%
plot_ly() %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
palette = c("#â€¢f72585","#b5179e","#7209b7","#560bad","#480ca8","#3a0ca3","#3f37c9","#4361ee","#4895ef","#4cc9f0")
data %>%
mutate(month = as.factor(month)) %>%
plot_ly() %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
length(palette)
palette = c("#E43F6F","#F56476","#B33C86", # Red
"#A5E6BA","#D7FFAB","#FFEE93", # Green
"#4E148C","#613DC1","#858AE3", # Violet
"#56B1FC","#5D91DE","#398BF7") # Blues
data = dbGetQuery(con,paste0("SELECT month, hour, AVG(mean) as vehicles
FROM bluetoothstations.time_group
GROUP BY hour, month
ORDER BY hour;"))
data %>%
mutate(month = as.factor(month)) %>%
plot_ly() %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = palette)
data %>%
mutate(month = as.factor(month)) %>%
plot_ly() %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = pals::kovesi.diverging_isoluminant_cjm_75_c24(12))
data %>%
mutate(month = as.factor(month)) %>%
plot_ly() %>%
add_lines(
x = ~hour,
y = ~vehicles,
color = ~month,
color_discrete_sequence = pals::kovesi.isoluminant_cm_70_c39(12))
data = dbGetQuery(con,"SELECT weekday, hour, AVG(mean) as mean
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(sum = sum(sum)) %>%
mutate(weekday = "")
rbind(data,
data_second) %>%
plot_ly(labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
data = dbGetQuery(con,"SELECT weekday, hour, SUM(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
rbind(data,
data_second) %>%
plot_ly(labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "",
daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night"))))
data_second
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night")))) %>%
plot_ly(labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night")))) %>%
plot_ly(labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data = rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night"))))
data
bslib::bs_themer()
light <- bs_theme()
library(bslib)
light <- bs_theme()
# Libraries
library("shinythemes")
library("flexdashboard")
library("DBI")
library("dplyr")
library("ggplot2")
library("tidyverse")
library("shinyWidgets")
library("shiny")
library("plotly")
library("scales")
library("DT")
library("leaflet")
library("leaflet.extras")
library("maps")
source("mysql_connection.R")
library("RMariaDB")
library(bslib)
# Establish connectiong to MySQL
con <- dbconnect()
data = dbGetQuery(con,"SELECT weekday, hour, SUM(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
data = rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night"))))
plot_ly(labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data = rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night")))) %>%
plot_ly(labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
plot_ly(data = data,
labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data
plot_ly(data = data,
labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
plot_ly(data = data,
labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data
plot_ly(data = data,
labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles)
data = dbGetQuery(con,"SELECT weekday, hour, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
data = rbind(data,
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night"))))
plot_ly(data = data,
labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles)
data
plot_ly(data = data,
labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles)
data = dbGetQuery(con,"SELECT weekday, hour, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data
data = dbGetQuery(con,"SELECT weekday as parents, hour as labels, AVG(sum) as values
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data = dbGetQuery(con,"SELECT weekday, hour, AVG(sum) as values
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data = dbGetQuery(con,"SELECT weekday, hour, AVG(sum)
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
data = dbGetQuery(con,"SELECT weekday, hour, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY weekday, hour;")
data_second = data %>%
select(-hour) %>%
rename(hour = weekday) %>%
group_by(hour) %>%
summarise(vehicles = sum(vehicles)) %>%
mutate(weekday = "")
data_second
data
data = rbind(data %>%
mutate(hour = weekday),
data_second) %>%
mutate(daytime = ifelse(hour>=6 & hour<12,"Morning",
ifelse(hour>=12 & hour<18,"Afternoon",
ifelse(hour>=18,"Evening",
"Night"))))
data
plot_ly(data = data,
labels = ~hour,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles)
plot_ly(data = data,
labels = ~daytime,
parents = ~weekday,
type = 'sunburst',
values = ~vehicles)
data = dbGetQuery(con,"SELECT month, hour, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY month, hour;")
data
data$season = ifelse(month %in% c(12,1,2),'Winter',
ifelse(month %in% c(3,4,5), 'Spring',
ifelse(month %in% c(6,7,8), 'Summer','Autumn')))
data$season = ifelse(data$month %in% c(12,1,2),'Winter',
ifelse(data$month %in% c(3,4,5), 'Spring',
ifelse(data$month %in% c(6,7,8), 'Summer','Autumn')))
data
months[data$month]
months[[data$month]]
data$month
month[1]
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
months[1]
months[1,2]
months[c(1,2)]
months[c(1,2m1)]
months[c(1,2,1)]
data$month[1]
data$month = for(i in length(data$month)){
data$month[i] = month[data$month[i]]
}
data$month[i] = months[data$month[i]]
data
for(i in length(data$month)){
data$month[i] = months[data$month[i]]
}
data
months[ data$month ]
View(data)
str(data$month)
data$month = as.integer(data$month)
months[data$month]
data
getOption("max.print")
View(data)
# Query with data about months
data = dbGetQuery(con,"SELECT month, hour, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY month, hour;")
# Column with seasons
data$season = ifelse(data$month %in% c(12,1,2),'Winter',
ifelse(data$month %in% c(3,4,5), 'Spring',
ifelse(data$month %in% c(6,7,8), 'Summer','Autumn')))
data$month = as.integer(data$month)
months[data$month]
data$month = months[as.integer(data$month)]
data
# Query with data about months
data = dbGetQuery(con,"SELECT month, AVG(sum) as vehicles
FROM bluetoothstations.time_group
GROUP BY month, hour;")
# Column with seasons
data$season = ifelse(data$month %in% c(12,1,2),'Winter',
ifelse(data$month %in% c(3,4,5), 'Spring',
ifelse(data$month %in% c(6,7,8), 'Summer','Autumn')))
# Mapping months to string
months = c("January","February","March",
"April","May","June",
"July","August","September",
"October","November","December")
data$month = months[as.integer(data$month)]
# Plot the sunburst
plot_ly(data,
labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data %>%
rbind(c("","",""))
data %>%
group_by(season) %>
summarise(vehicles = sum(vehicles))
data %>%
group_by(season) %>%
summarise(vehicles = sum(vehicles))
data %>%
group_by(season) %>%
summarise(vehicles = sum(vehicles)) %>%
rename(month = season) %>%
mutate(season = "") %>%
rbind(data)
data %>%
group_by(season) %>%
summarise(vehicles = sum(vehicles)) %>%
rename(month = season) %>%
mutate(season = "") %>%
rbind(data) %>%
# Plot the sunburst
plot_ly(labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data %>%
group_by(season) %>%
summarise(vehicles = sum(vehicles)) %>%
rename(month = season) %>%
mutate(season = "") %>%
rbind(data) %>%
# Plot the sunburst
plot_ly(labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles)
data %>%
group_by(season) %>%
summarise(vehicles = mean(vehicles)) %>%
rename(month = season) %>%
mutate(season = "") %>%
rbind(data) %>%
# Plot the sunburst
plot_ly(labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
data %>%
group_by(season) %>%
summarise(vehicles = sum(vehicles)) %>%
rename(month = season) %>%
mutate(season = "") %>%
rbind(data) %>%
# Plot the sunburst
plot_ly(labels = ~month,
parents = ~season,
type = 'sunburst',
values = ~vehicles,
branchvalues = 'total')
